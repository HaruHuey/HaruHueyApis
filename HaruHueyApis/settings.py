"""
Django settings for HaruHueyApis project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from datetime import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '{{ SECRET_KEY }}'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# 허용 된 호스트
# 아이피 주소 필터링
ALLOWED_HOSTS = [{{ IP }}]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_crontab',
    'DialogflowApi',
    'FacebookApi',
    'KakaoApi',
    'DatabasePy',
    'ApisCore'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'HaruHueyApis.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'HaruHueyApis.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2', # Django DB 설정
        'NAME': '{{ NAME }}', # DB 이름
        'USER': '{{ USER }}', # DB 접속 유저
        'PASSWORD': '{{ PASSWORD }}', # DB 접속 유저 비밀번호
        'HOST': '{{ HOST }}', # DB HOST
        'PORT': '{{ PORT }}' # DB PORT
    }
}

# Crontab 설정
# 시간
# app.directory.py.def/class
# 로깅 삭제 2019.04.14
CRONJOBS = [
    # 대기정보 - 30분 간격
    ('*/30 * * * *', 'DatabasePy.AirData_AirKorea.airdata_api.API_Call_AirData'),
    # 급식정보 - 오후 11시 업데이트
    ('50 23 * * *', 'DatabasePy.MealData_Neis.mealdata_api.API_Call_MealData'),
    # 보건기상지수정보 - 오전 6시 5분, 오후 6시 5분
    ('5 6 * * *', 'DatabasePy.Weather_index.Health_index.Health_index_Data'),
    ('5 18 * * *', 'DatabasePy.Weather_index.Health_index.Health_index_Data'),
    # 생활기상지수정보 - 오전 6시 5분, 오후 7시 5분
    ('5 6 * * *', 'DatabasePy.Weather_index.Living_index.Living_index_Data'),
    ('5 19 * * *', 'DatabasePy.Weather_index.Living_index.Living_index_Data'),
    # 날씨정보 - 5분 간격
    ('*/5 * * * *', 'DatabasePy.Weather_skplanet.weather_skplanet_api.Weather_Skplanet')
]

CRONTAB_COMMAND_SUFFIX = '2>&1'

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

# 로깅
# 삭제 후 배포
# https://docs.djangoproject.com/en/1.11/topics/logging/
# formatters : Message Output Format
# level : 'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt' : "%Y.%m.%d # %H:%M:%S"
        },
        'simple': {
            'format': '[%(asctime)s] %(levelname)s %(message)s'
        },
    },
    'handlers': {
        'log_handlers': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'handlers_DEBUG.log',
            # LOG_DATA/handlers_{:%Y # %m # %d}.log'.format(datetime.now())
            # handlers_DEBUG.log
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'django': {
            'handlers':['log_handlers'],
            'propagate': True,
            'level':'INFO',
        },
        'django.request': {
            'handlers':['log_handlers'],
            'propagate': True,
            'level':'INFO',
        },
        'KakaoApi': {
            'handlers': ['log_handlers'],
            'level': 'DEBUG',
        }
    }
}
